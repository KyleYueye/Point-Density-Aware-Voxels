2022-05-16 12:02:21,933   INFO  **********************Start logging**********************
2022-05-16 12:02:21,933   INFO  CUDA_VISIBLE_DEVICES=3
2022-05-16 12:02:21,933   INFO  cfg_file         cfgs/wanji_models/pdv.yaml
2022-05-16 12:02:21,933   INFO  batch_size       2
2022-05-16 12:02:21,933   INFO  epochs           50
2022-05-16 12:02:21,933   INFO  workers          8
2022-05-16 12:02:21,933   INFO  extra_tag        default
2022-05-16 12:02:21,934   INFO  ckpt             None
2022-05-16 12:02:21,934   INFO  pretrained_model None
2022-05-16 12:02:21,934   INFO  launcher         none
2022-05-16 12:02:21,934   INFO  tcp_port         18888
2022-05-16 12:02:21,934   INFO  sync_bn          False
2022-05-16 12:02:21,934   INFO  fix_random_seed  False
2022-05-16 12:02:21,934   INFO  ckpt_save_interval 1
2022-05-16 12:02:21,934   INFO  local_rank       0
2022-05-16 12:02:21,934   INFO  max_ckpt_save_num 30
2022-05-16 12:02:21,934   INFO  merge_all_iters_to_one_epoch False
2022-05-16 12:02:21,934   INFO  set_cfgs         None
2022-05-16 12:02:21,934   INFO  max_waiting_mins 0
2022-05-16 12:02:21,934   INFO  start_epoch      0
2022-05-16 12:02:21,934   INFO  save_to_file     False
2022-05-16 12:02:21,934   INFO  one_batch_file   None
2022-05-16 12:02:21,935   INFO  train_only       False
2022-05-16 12:02:21,935   INFO  cfg.ROOT_DIR: /media/disk/02drive/05yueye/code/PDV
2022-05-16 12:02:21,935   INFO  cfg.LOCAL_RANK: 0
2022-05-16 12:02:21,935   INFO  cfg.CLASS_NAMES: ['bus', 'car', 'bicycle', 'pedestrian']
2022-05-16 12:02:21,935   INFO  
cfg.WANDB = edict()
2022-05-16 12:02:21,935   INFO  cfg.WANDB.ENABLED: True
2022-05-16 12:02:21,935   INFO  cfg.WANDB.PROJECT: density_wanji
2022-05-16 12:02:21,935   INFO  cfg.WANDB.ENTITY: trailab
2022-05-16 12:02:21,935   INFO  cfg.WANDB.SUMMARY_HIGHEST_METRIC: Car_3d/moderate_R40
2022-05-16 12:02:21,935   INFO  
cfg.DATA_CONFIG = edict()
2022-05-16 12:02:21,935   INFO  cfg.DATA_CONFIG.DATASET: WanjiDataset
2022-05-16 12:02:21,935   INFO  cfg.DATA_CONFIG.DATA_PATH: /media/disk/02drive/data/20211215161104
2022-05-16 12:02:21,935   INFO  cfg.DATA_CONFIG.POINT_CLOUD_RANGE: [-138, -145, -5, 150, 135, 2.5]
2022-05-16 12:02:21,936   INFO  
cfg.DATA_CONFIG.DATA_SPLIT = edict()
2022-05-16 12:02:21,936   INFO  cfg.DATA_CONFIG.DATA_SPLIT.train: train
2022-05-16 12:02:21,936   INFO  cfg.DATA_CONFIG.DATA_SPLIT.test: test
2022-05-16 12:02:21,936   INFO  cfg.DATA_CONFIG.GET_ITEM_LIST: ['points']
2022-05-16 12:02:21,936   INFO  cfg.DATA_CONFIG.FOV_POINTS_ONLY: False
2022-05-16 12:02:21,936   INFO  
cfg.DATA_CONFIG.POINT_FEATURE_ENCODING = edict()
2022-05-16 12:02:21,936   INFO  cfg.DATA_CONFIG.POINT_FEATURE_ENCODING.encoding_type: absolute_coordinates_encoding
2022-05-16 12:02:21,936   INFO  cfg.DATA_CONFIG.POINT_FEATURE_ENCODING.used_feature_list: ['x', 'y', 'z', 'intensity']
2022-05-16 12:02:21,936   INFO  cfg.DATA_CONFIG.POINT_FEATURE_ENCODING.src_feature_list: ['x', 'y', 'z', 'intensity']
2022-05-16 12:02:21,936   INFO  cfg.DATA_CONFIG.DATA_PROCESSOR: [{'NAME': 'mask_points_and_boxes_outside_range', 'REMOVE_OUTSIDE_BOXES': True}, {'NAME': 'shuffle_points', 'SHUFFLE_ENABLED': {'train': True, 'test': False}}, {'NAME': 'transform_points_to_voxels', 'VOXEL_SIZE': [0.5, 0.5, 0.1], 'MAX_POINTS_PER_VOXEL': 100, 'MAX_NUMBER_OF_VOXELS': {'train': 1000000, 'test': 1000000}}]
2022-05-16 12:02:21,936   INFO  cfg.DATA_CONFIG._BASE_CONFIG_: cfgs/dataset_configs/wanji_dataset.yaml
2022-05-16 12:02:21,936   INFO  
cfg.MODEL = edict()
2022-05-16 12:02:21,936   INFO  cfg.MODEL.NAME: PDV
2022-05-16 12:02:21,936   INFO  
cfg.MODEL.VFE = edict()
2022-05-16 12:02:21,937   INFO  cfg.MODEL.VFE.NAME: MeanVFE
2022-05-16 12:02:21,937   INFO  
cfg.MODEL.BACKBONE_3D = edict()
2022-05-16 12:02:21,937   INFO  cfg.MODEL.BACKBONE_3D.NAME: VoxelBackBone8x
2022-05-16 12:02:21,937   INFO  
cfg.MODEL.MAP_TO_BEV = edict()
2022-05-16 12:02:21,937   INFO  cfg.MODEL.MAP_TO_BEV.NAME: HeightCompression
2022-05-16 12:02:21,937   INFO  cfg.MODEL.MAP_TO_BEV.NUM_BEV_FEATURES: 512
2022-05-16 12:02:21,937   INFO  
cfg.MODEL.BACKBONE_2D = edict()
2022-05-16 12:02:21,937   INFO  cfg.MODEL.BACKBONE_2D.NAME: BaseBEVBackbone
2022-05-16 12:02:21,937   INFO  cfg.MODEL.BACKBONE_2D.LAYER_NUMS: [5, 5]
2022-05-16 12:02:21,937   INFO  cfg.MODEL.BACKBONE_2D.LAYER_STRIDES: [1, 2]
2022-05-16 12:02:21,937   INFO  cfg.MODEL.BACKBONE_2D.NUM_FILTERS: [128, 256]
2022-05-16 12:02:21,937   INFO  cfg.MODEL.BACKBONE_2D.UPSAMPLE_STRIDES: [1, 2]
2022-05-16 12:02:21,938   INFO  cfg.MODEL.BACKBONE_2D.NUM_UPSAMPLE_FILTERS: [256, 256]
2022-05-16 12:02:21,938   INFO  
cfg.MODEL.DENSE_HEAD = edict()
2022-05-16 12:02:21,938   INFO  cfg.MODEL.DENSE_HEAD.NAME: AnchorHeadSingle
2022-05-16 12:02:21,938   INFO  cfg.MODEL.DENSE_HEAD.CLASS_AGNOSTIC: False
2022-05-16 12:02:21,938   INFO  cfg.MODEL.DENSE_HEAD.USE_DIRECTION_CLASSIFIER: True
2022-05-16 12:02:21,938   INFO  cfg.MODEL.DENSE_HEAD.DIR_OFFSET: 0.78539
2022-05-16 12:02:21,938   INFO  cfg.MODEL.DENSE_HEAD.DIR_LIMIT_OFFSET: 0.0
2022-05-16 12:02:21,938   INFO  cfg.MODEL.DENSE_HEAD.NUM_DIR_BINS: 2
2022-05-16 12:02:21,938   INFO  cfg.MODEL.DENSE_HEAD.ANCHOR_GENERATOR_CONFIG: [{'class_name': 'bus', 'anchor_sizes': [[9.644, 2.891, 3.32]], 'anchor_rotations': [0, 4.92], 'anchor_bottom_heights': [0], 'align_center': False, 'feature_map_stride': 8, 'matched_threshold': 0.5, 'unmatched_threshold': 0.3}, {'class_name': 'car', 'anchor_sizes': [[4.704, 1.893, 1.686]], 'anchor_rotations': [0, 4.53], 'anchor_bottom_heights': [0], 'align_center': False, 'feature_map_stride': 8, 'matched_threshold': 0.6, 'unmatched_threshold': 0.3}, {'class_name': 'bicycle', 'anchor_sizes': [[1.95, 0.859, 1.667]], 'anchor_rotations': [0, 3.3], 'anchor_bottom_heights': [0], 'align_center': False, 'feature_map_stride': 8, 'matched_threshold': 0.5, 'unmatched_threshold': 0.3}, {'class_name': 'pedestrian', 'anchor_sizes': [[1.399, 0.846, 1.667]], 'anchor_rotations': [0, 0.84], 'anchor_bottom_heights': [0], 'align_center': False, 'feature_map_stride': 8, 'matched_threshold': 0.3, 'unmatched_threshold': 0.2}]
2022-05-16 12:02:21,938   INFO  
cfg.MODEL.DENSE_HEAD.TARGET_ASSIGNER_CONFIG = edict()
2022-05-16 12:02:21,938   INFO  cfg.MODEL.DENSE_HEAD.TARGET_ASSIGNER_CONFIG.NAME: AxisAlignedTargetAssigner
2022-05-16 12:02:21,938   INFO  cfg.MODEL.DENSE_HEAD.TARGET_ASSIGNER_CONFIG.POS_FRACTION: -1.0
2022-05-16 12:02:21,939   INFO  cfg.MODEL.DENSE_HEAD.TARGET_ASSIGNER_CONFIG.SAMPLE_SIZE: 512
2022-05-16 12:02:21,939   INFO  cfg.MODEL.DENSE_HEAD.TARGET_ASSIGNER_CONFIG.NORM_BY_NUM_EXAMPLES: False
2022-05-16 12:02:21,939   INFO  cfg.MODEL.DENSE_HEAD.TARGET_ASSIGNER_CONFIG.MATCH_HEIGHT: False
2022-05-16 12:02:21,939   INFO  cfg.MODEL.DENSE_HEAD.TARGET_ASSIGNER_CONFIG.BOX_CODER: ResidualCoder
2022-05-16 12:02:21,939   INFO  
cfg.MODEL.DENSE_HEAD.LOSS_CONFIG = edict()
2022-05-16 12:02:21,939   INFO  
cfg.MODEL.DENSE_HEAD.LOSS_CONFIG.LOSS_WEIGHTS = edict()
2022-05-16 12:02:21,939   INFO  cfg.MODEL.DENSE_HEAD.LOSS_CONFIG.LOSS_WEIGHTS.cls_weight: 1.0
2022-05-16 12:02:21,939   INFO  cfg.MODEL.DENSE_HEAD.LOSS_CONFIG.LOSS_WEIGHTS.loc_weight: 2.0
2022-05-16 12:02:21,939   INFO  cfg.MODEL.DENSE_HEAD.LOSS_CONFIG.LOSS_WEIGHTS.dir_weight: 0.2
2022-05-16 12:02:21,939   INFO  cfg.MODEL.DENSE_HEAD.LOSS_CONFIG.LOSS_WEIGHTS.code_weights: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
2022-05-16 12:02:21,939   INFO  
cfg.MODEL.ROI_HEAD = edict()
2022-05-16 12:02:21,939   INFO  cfg.MODEL.ROI_HEAD.NAME: PDVHead
2022-05-16 12:02:21,940   INFO  cfg.MODEL.ROI_HEAD.CLASS_AGNOSTIC: True
2022-05-16 12:02:21,940   INFO  cfg.MODEL.ROI_HEAD.SHARED_FC: [256, 256]
2022-05-16 12:02:21,940   INFO  cfg.MODEL.ROI_HEAD.CLS_FC: [256, 256]
2022-05-16 12:02:21,940   INFO  cfg.MODEL.ROI_HEAD.REG_FC: [256, 256]
2022-05-16 12:02:21,940   INFO  cfg.MODEL.ROI_HEAD.DP_RATIO: 0.3
2022-05-16 12:02:21,940   INFO  
cfg.MODEL.ROI_HEAD.NMS_CONFIG = edict()
2022-05-16 12:02:21,940   INFO  
cfg.MODEL.ROI_HEAD.NMS_CONFIG.TRAIN = edict()
2022-05-16 12:02:21,940   INFO  cfg.MODEL.ROI_HEAD.NMS_CONFIG.TRAIN.NMS_TYPE: nms_gpu
2022-05-16 12:02:21,940   INFO  cfg.MODEL.ROI_HEAD.NMS_CONFIG.TRAIN.MULTI_CLASSES_NMS: False
2022-05-16 12:02:21,940   INFO  cfg.MODEL.ROI_HEAD.NMS_CONFIG.TRAIN.NMS_PRE_MAXSIZE: 9000
2022-05-16 12:02:21,940   INFO  cfg.MODEL.ROI_HEAD.NMS_CONFIG.TRAIN.NMS_POST_MAXSIZE: 512
2022-05-16 12:02:21,940   INFO  cfg.MODEL.ROI_HEAD.NMS_CONFIG.TRAIN.NMS_THRESH: 0.8
2022-05-16 12:02:21,941   INFO  
cfg.MODEL.ROI_HEAD.NMS_CONFIG.TEST = edict()
2022-05-16 12:02:21,941   INFO  cfg.MODEL.ROI_HEAD.NMS_CONFIG.TEST.NMS_TYPE: nms_gpu
2022-05-16 12:02:21,941   INFO  cfg.MODEL.ROI_HEAD.NMS_CONFIG.TEST.MULTI_CLASSES_NMS: False
2022-05-16 12:02:21,941   INFO  cfg.MODEL.ROI_HEAD.NMS_CONFIG.TEST.NMS_PRE_MAXSIZE: 1024
2022-05-16 12:02:21,941   INFO  cfg.MODEL.ROI_HEAD.NMS_CONFIG.TEST.NMS_POST_MAXSIZE: 100
2022-05-16 12:02:21,941   INFO  cfg.MODEL.ROI_HEAD.NMS_CONFIG.TEST.NMS_THRESH: 0.7
2022-05-16 12:02:21,941   INFO  
cfg.MODEL.ROI_HEAD.VOXEL_AGGREGATION = edict()
2022-05-16 12:02:21,941   INFO  cfg.MODEL.ROI_HEAD.VOXEL_AGGREGATION.NUM_FEATURES: [64, 64]
2022-05-16 12:02:21,941   INFO  cfg.MODEL.ROI_HEAD.VOXEL_AGGREGATION.FEATURE_LOCATIONS: ['x_conv3', 'x_conv4']
2022-05-16 12:02:21,941   INFO  
cfg.MODEL.ROI_HEAD.ROI_GRID_POOL = edict()
2022-05-16 12:02:21,941   INFO  cfg.MODEL.ROI_HEAD.ROI_GRID_POOL.FEATURE_LOCATIONS: ['x_conv3', 'x_conv4']
2022-05-16 12:02:21,941   INFO  cfg.MODEL.ROI_HEAD.ROI_GRID_POOL.GRID_SIZE: 6
2022-05-16 12:02:21,942   INFO  
cfg.MODEL.ROI_HEAD.ROI_GRID_POOL.POOL_LAYERS = edict()
2022-05-16 12:02:21,942   INFO  
cfg.MODEL.ROI_HEAD.ROI_GRID_POOL.POOL_LAYERS.x_conv3 = edict()
2022-05-16 12:02:21,942   INFO  cfg.MODEL.ROI_HEAD.ROI_GRID_POOL.POOL_LAYERS.x_conv3.MLPS: [[32, 32], [32, 32]]
2022-05-16 12:02:21,942   INFO  cfg.MODEL.ROI_HEAD.ROI_GRID_POOL.POOL_LAYERS.x_conv3.POOL_RADIUS: [0.4, 0.8]
2022-05-16 12:02:21,942   INFO  cfg.MODEL.ROI_HEAD.ROI_GRID_POOL.POOL_LAYERS.x_conv3.NSAMPLE: [16, 16]
2022-05-16 12:02:21,942   INFO  cfg.MODEL.ROI_HEAD.ROI_GRID_POOL.POOL_LAYERS.x_conv3.POOL_METHOD: max_pool
2022-05-16 12:02:21,942   INFO  cfg.MODEL.ROI_HEAD.ROI_GRID_POOL.POOL_LAYERS.x_conv3.USE_DENSITY: True
2022-05-16 12:02:21,942   INFO  
cfg.MODEL.ROI_HEAD.ROI_GRID_POOL.POOL_LAYERS.x_conv4 = edict()
2022-05-16 12:02:21,942   INFO  cfg.MODEL.ROI_HEAD.ROI_GRID_POOL.POOL_LAYERS.x_conv4.MLPS: [[32, 32], [32, 32]]
2022-05-16 12:02:21,942   INFO  cfg.MODEL.ROI_HEAD.ROI_GRID_POOL.POOL_LAYERS.x_conv4.POOL_RADIUS: [0.8, 1.6]
2022-05-16 12:02:21,942   INFO  cfg.MODEL.ROI_HEAD.ROI_GRID_POOL.POOL_LAYERS.x_conv4.NSAMPLE: [16, 16]
2022-05-16 12:02:21,942   INFO  cfg.MODEL.ROI_HEAD.ROI_GRID_POOL.POOL_LAYERS.x_conv4.POOL_METHOD: max_pool
2022-05-16 12:02:21,942   INFO  cfg.MODEL.ROI_HEAD.ROI_GRID_POOL.POOL_LAYERS.x_conv4.USE_DENSITY: True
2022-05-16 12:02:21,943   INFO  
cfg.MODEL.ROI_HEAD.ROI_GRID_POOL.ATTENTION = edict()
2022-05-16 12:02:21,943   INFO  cfg.MODEL.ROI_HEAD.ROI_GRID_POOL.ATTENTION.ENABLED: True
2022-05-16 12:02:21,943   INFO  cfg.MODEL.ROI_HEAD.ROI_GRID_POOL.ATTENTION.NUM_FEATURES: 128
2022-05-16 12:02:21,943   INFO  cfg.MODEL.ROI_HEAD.ROI_GRID_POOL.ATTENTION.NUM_HEADS: 1
2022-05-16 12:02:21,943   INFO  cfg.MODEL.ROI_HEAD.ROI_GRID_POOL.ATTENTION.NUM_HIDDEN_FEATURES: 128
2022-05-16 12:02:21,943   INFO  cfg.MODEL.ROI_HEAD.ROI_GRID_POOL.ATTENTION.NUM_LAYERS: 1
2022-05-16 12:02:21,943   INFO  cfg.MODEL.ROI_HEAD.ROI_GRID_POOL.ATTENTION.POSITIONAL_ENCODER: density_grid_points
2022-05-16 12:02:21,943   INFO  cfg.MODEL.ROI_HEAD.ROI_GRID_POOL.ATTENTION.MAX_NUM_BOXES: 20
2022-05-16 12:02:21,943   INFO  cfg.MODEL.ROI_HEAD.ROI_GRID_POOL.ATTENTION.DROPOUT: 0.1
2022-05-16 12:02:21,943   INFO  cfg.MODEL.ROI_HEAD.ROI_GRID_POOL.ATTENTION.COMBINE: True
2022-05-16 12:02:21,943   INFO  cfg.MODEL.ROI_HEAD.ROI_GRID_POOL.ATTENTION.MASK_EMPTY_POINTS: False
2022-05-16 12:02:21,943   INFO  
cfg.MODEL.ROI_HEAD.DENSITY_CONFIDENCE = edict()
2022-05-16 12:02:21,943   INFO  cfg.MODEL.ROI_HEAD.DENSITY_CONFIDENCE.ENABLED: True
2022-05-16 12:02:21,953   INFO  cfg.MODEL.ROI_HEAD.DENSITY_CONFIDENCE.GRID_SIZE: 1
2022-05-16 12:02:21,953   INFO  cfg.MODEL.ROI_HEAD.DENSITY_CONFIDENCE.MAX_NUM_BOXES: 20
2022-05-16 12:02:21,953   INFO  cfg.MODEL.ROI_HEAD.DENSITY_CONFIDENCE.ADD_SHARED_FEATURES: True
2022-05-16 12:02:21,954   INFO  
cfg.MODEL.ROI_HEAD.TARGET_CONFIG = edict()
2022-05-16 12:02:21,954   INFO  cfg.MODEL.ROI_HEAD.TARGET_CONFIG.BOX_CODER: ResidualCoder
2022-05-16 12:02:21,954   INFO  cfg.MODEL.ROI_HEAD.TARGET_CONFIG.ROI_PER_IMAGE: 128
2022-05-16 12:02:21,954   INFO  cfg.MODEL.ROI_HEAD.TARGET_CONFIG.FG_RATIO: 0.5
2022-05-16 12:02:21,954   INFO  cfg.MODEL.ROI_HEAD.TARGET_CONFIG.SAMPLE_ROI_BY_EACH_CLASS: True
2022-05-16 12:02:21,954   INFO  cfg.MODEL.ROI_HEAD.TARGET_CONFIG.CLS_SCORE_TYPE: roi_iou
2022-05-16 12:02:21,955   INFO  cfg.MODEL.ROI_HEAD.TARGET_CONFIG.CLS_FG_THRESH: 0.75
2022-05-16 12:02:21,955   INFO  cfg.MODEL.ROI_HEAD.TARGET_CONFIG.CLS_BG_THRESH: 0.25
2022-05-16 12:02:21,955   INFO  cfg.MODEL.ROI_HEAD.TARGET_CONFIG.CLS_BG_THRESH_LO: 0.1
2022-05-16 12:02:21,955   INFO  cfg.MODEL.ROI_HEAD.TARGET_CONFIG.HARD_BG_RATIO: 0.8
2022-05-16 12:02:21,955   INFO  cfg.MODEL.ROI_HEAD.TARGET_CONFIG.REG_FG_THRESH: 0.55
2022-05-16 12:02:21,955   INFO  
cfg.MODEL.ROI_HEAD.LOSS_CONFIG = edict()
2022-05-16 12:02:21,955   INFO  cfg.MODEL.ROI_HEAD.LOSS_CONFIG.CLS_LOSS: BinaryCrossEntropy
2022-05-16 12:02:21,956   INFO  cfg.MODEL.ROI_HEAD.LOSS_CONFIG.REG_LOSS: smooth-l1
2022-05-16 12:02:21,956   INFO  cfg.MODEL.ROI_HEAD.LOSS_CONFIG.CORNER_LOSS_REGULARIZATION: True
2022-05-16 12:02:21,956   INFO  
cfg.MODEL.ROI_HEAD.LOSS_CONFIG.LOSS_WEIGHTS = edict()
2022-05-16 12:02:21,956   INFO  cfg.MODEL.ROI_HEAD.LOSS_CONFIG.LOSS_WEIGHTS.rcnn_cls_weight: 1.0
2022-05-16 12:02:21,956   INFO  cfg.MODEL.ROI_HEAD.LOSS_CONFIG.LOSS_WEIGHTS.rcnn_reg_weight: 1.0
2022-05-16 12:02:21,956   INFO  cfg.MODEL.ROI_HEAD.LOSS_CONFIG.LOSS_WEIGHTS.rcnn_corner_weight: 1.0
2022-05-16 12:02:21,956   INFO  cfg.MODEL.ROI_HEAD.LOSS_CONFIG.LOSS_WEIGHTS.code_weights: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
2022-05-16 12:02:21,957   INFO  
cfg.MODEL.POST_PROCESSING = edict()
2022-05-16 12:02:21,957   INFO  cfg.MODEL.POST_PROCESSING.RECALL_THRESH_LIST: [0.25, 0.5, 0.7, 0.9]
2022-05-16 12:02:21,957   INFO  cfg.MODEL.POST_PROCESSING.SCORE_THRESH: 0.3
2022-05-16 12:02:21,957   INFO  cfg.MODEL.POST_PROCESSING.OUTPUT_RAW_SCORE: False
2022-05-16 12:02:21,957   INFO  cfg.MODEL.POST_PROCESSING.EVAL_METRIC: wanji
2022-05-16 12:02:21,957   INFO  
cfg.MODEL.POST_PROCESSING.NMS_CONFIG = edict()
2022-05-16 12:02:21,958   INFO  cfg.MODEL.POST_PROCESSING.NMS_CONFIG.MULTI_CLASSES_NMS: False
2022-05-16 12:02:21,958   INFO  cfg.MODEL.POST_PROCESSING.NMS_CONFIG.NMS_TYPE: nms_gpu
2022-05-16 12:02:21,958   INFO  cfg.MODEL.POST_PROCESSING.NMS_CONFIG.NMS_THRESH: 0.1
2022-05-16 12:02:21,958   INFO  cfg.MODEL.POST_PROCESSING.NMS_CONFIG.NMS_PRE_MAXSIZE: 4096
2022-05-16 12:02:21,958   INFO  cfg.MODEL.POST_PROCESSING.NMS_CONFIG.NMS_POST_MAXSIZE: 500
2022-05-16 12:02:21,958   INFO  
cfg.OPTIMIZATION = edict()
2022-05-16 12:02:21,958   INFO  cfg.OPTIMIZATION.BATCH_SIZE_PER_GPU: 2
2022-05-16 12:02:21,959   INFO  cfg.OPTIMIZATION.NUM_EPOCHS: 80
2022-05-16 12:02:21,959   INFO  cfg.OPTIMIZATION.OPTIMIZER: adam_onecycle
2022-05-16 12:02:21,959   INFO  cfg.OPTIMIZATION.LR: 0.01
2022-05-16 12:02:21,959   INFO  cfg.OPTIMIZATION.WEIGHT_DECAY: 0.01
2022-05-16 12:02:21,959   INFO  cfg.OPTIMIZATION.MOMENTUM: 0.9
2022-05-16 12:02:21,959   INFO  cfg.OPTIMIZATION.MOMS: [0.95, 0.85]
2022-05-16 12:02:21,959   INFO  cfg.OPTIMIZATION.PCT_START: 0.4
2022-05-16 12:02:21,960   INFO  cfg.OPTIMIZATION.DIV_FACTOR: 10
2022-05-16 12:02:21,960   INFO  cfg.OPTIMIZATION.DECAY_STEP_LIST: [35, 45]
2022-05-16 12:02:21,960   INFO  cfg.OPTIMIZATION.LR_DECAY: 0.1
2022-05-16 12:02:21,960   INFO  cfg.OPTIMIZATION.LR_CLIP: 1e-07
2022-05-16 12:02:21,960   INFO  cfg.OPTIMIZATION.LR_WARMUP: False
2022-05-16 12:02:21,960   INFO  cfg.OPTIMIZATION.WARMUP_EPOCH: 1
2022-05-16 12:02:21,961   INFO  cfg.OPTIMIZATION.GRAD_NORM_CLIP: 10
2022-05-16 12:02:21,961   INFO  cfg.TAG: pdv
2022-05-16 12:02:21,961   INFO  cfg.EXP_GROUP_PATH: wanji_models
2022-05-16 12:02:24,685   INFO  PDV(
  (vfe): MeanVFE()
  (backbone_3d): VoxelBackBone8x(
    (conv_input): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (conv1): SparseSequential(
      (0): SparseSequential(
        (0): SubMConv3d()
        (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU()
      )
    )
    (conv2): SparseSequential(
      (0): SparseSequential(
        (0): SparseConv3d()
        (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU()
      )
      (1): SparseSequential(
        (0): SubMConv3d()
        (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU()
      )
      (2): SparseSequential(
        (0): SubMConv3d()
        (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU()
      )
    )
    (conv3): SparseSequential(
      (0): SparseSequential(
        (0): SparseConv3d()
        (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU()
      )
      (1): SparseSequential(
        (0): SubMConv3d()
        (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU()
      )
      (2): SparseSequential(
        (0): SubMConv3d()
        (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU()
      )
    )
    (conv4): SparseSequential(
      (0): SparseSequential(
        (0): SparseConv3d()
        (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU()
      )
      (1): SparseSequential(
        (0): SubMConv3d()
        (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU()
      )
      (2): SparseSequential(
        (0): SubMConv3d()
        (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU()
      )
    )
    (conv_out): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (map_to_bev_module): HeightCompression()
  (pfe): None
  (backbone_2d): BaseBEVBackbone(
    (blocks): ModuleList(
      (0): Sequential(
        (0): ZeroPad2d(padding=(1, 1, 1, 1), value=0.0)
        (1): Conv2d(512, 128, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (2): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (3): ReLU()
        (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (5): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (6): ReLU()
        (7): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (8): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (9): ReLU()
        (10): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (11): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (12): ReLU()
        (13): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (14): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (15): ReLU()
        (16): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (17): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (18): ReLU()
      )
      (1): Sequential(
        (0): ZeroPad2d(padding=(1, 1, 1, 1), value=0.0)
        (1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), bias=False)
        (2): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (3): ReLU()
        (4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (5): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (6): ReLU()
        (7): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (8): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (9): ReLU()
        (10): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (11): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (12): ReLU()
        (13): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (14): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (15): ReLU()
        (16): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (17): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (18): ReLU()
      )
    )
    (deblocks): ModuleList(
      (0): Sequential(
        (0): ConvTranspose2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU()
      )
      (1): Sequential(
        (0): ConvTranspose2d(256, 256, kernel_size=(2, 2), stride=(2, 2), bias=False)
        (1): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU()
      )
    )
  )
  (dense_head): AnchorHeadSingle(
    (cls_loss_func): SigmoidFocalClassificationLoss()
    (reg_loss_func): WeightedSmoothL1Loss()
    (dir_loss_func): WeightedCrossEntropyLoss()
    (conv_cls): Conv2d(512, 32, kernel_size=(1, 1), stride=(1, 1))
    (conv_box): Conv2d(512, 56, kernel_size=(1, 1), stride=(1, 1))
    (conv_dir_cls): Conv2d(512, 16, kernel_size=(1, 1), stride=(1, 1))
  )
  (point_head): None
  (roi_head): PDVHead(
    (proposal_target_layer): ProposalTargetLayer()
    (reg_loss_func): WeightedSmoothL1Loss()
    (roi_grid_pool_layers): ModuleList(
      (0): StackSAModuleMSGAttention(
        (groupers): ModuleList(
          (0): QueryAndGroup()
          (1): QueryAndGroup()
        )
        (mlps): ModuleList(
          (0): Sequential(
            (0): Conv2d(68, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU()
            (3): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU()
          )
          (1): Sequential(
            (0): Conv2d(68, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU()
            (3): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU()
          )
        )
      )
      (1): StackSAModuleMSGAttention(
        (groupers): ModuleList(
          (0): QueryAndGroup()
          (1): QueryAndGroup()
        )
        (mlps): ModuleList(
          (0): Sequential(
            (0): Conv2d(68, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU()
            (3): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU()
          )
          (1): Sequential(
            (0): Conv2d(68, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU()
            (3): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU()
          )
        )
      )
    )
    (attention_head): TransformerEncoder(
      (pos_encoder): FeedForwardPositionalEncoding(
        (ffn): Sequential(
          (0): Conv1d(4, 64, kernel_size=(1,), stride=(1,))
          (1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv1d(64, 128, kernel_size=(1,), stride=(1,))
        )
      )
      (transformer_encoder): TransformerEncoder(
        (layers): ModuleList(
          (0): TransformerEncoderLayer(
            (self_attn): MultiheadAttention(
              (out_proj): _LinearWithBias(in_features=128, out_features=128, bias=True)
            )
            (linear1): Linear(in_features=128, out_features=128, bias=True)
            (dropout): Dropout(p=0.1, inplace=False)
            (linear2): Linear(in_features=128, out_features=128, bias=True)
            (norm1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
            (dropout1): Dropout(p=0.1, inplace=False)
            (dropout2): Dropout(p=0.1, inplace=False)
          )
        )
      )
    )
    (shared_fc_layer): Sequential(
      (0): Conv1d(27648, 256, kernel_size=(1,), stride=(1,), bias=False)
      (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU()
      (3): Dropout(p=0.3, inplace=False)
      (4): Conv1d(256, 256, kernel_size=(1,), stride=(1,), bias=False)
      (5): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (6): ReLU()
    )
    (reg_layers): Sequential(
      (0): Conv1d(256, 256, kernel_size=(1,), stride=(1,), bias=False)
      (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU()
      (3): Dropout(p=0.3, inplace=False)
      (4): Conv1d(256, 256, kernel_size=(1,), stride=(1,), bias=False)
      (5): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (6): ReLU()
      (7): Conv1d(256, 7, kernel_size=(1,), stride=(1,))
    )
    (cls_layers): Sequential(
      (0): Conv1d(260, 256, kernel_size=(1,), stride=(1,), bias=False)
      (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU()
      (3): Dropout(p=0.3, inplace=False)
      (4): Conv1d(256, 256, kernel_size=(1,), stride=(1,), bias=False)
      (5): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (6): ReLU()
      (7): Conv1d(256, 1, kernel_size=(1,), stride=(1,))
    )
  )
)
2022-05-16 12:02:24,703   INFO  **********************Start training wanji_models/pdv(default)**********************
